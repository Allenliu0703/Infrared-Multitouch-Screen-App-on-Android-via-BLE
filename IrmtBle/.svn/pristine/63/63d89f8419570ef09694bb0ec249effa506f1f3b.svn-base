package com.example.irmtble;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattDescriptor;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;

public class BLCommService {
	public  BluetoothManager mBluetoothManager;
	public  BluetoothAdapter mBluetoothAdapter;
	public  BluetoothGatt mBluetoothGatt;
	private  BluetoothGattService mRFCommService;
	private  BluetoothGattCharacteristic mRFCommTXCharacteristic;
	private  BluetoothGattCharacteristic mRFCommRXCharacteristic;
    private  Activity inerActivity = null;
	private List<MTBeacon> scan_devices = new ArrayList<MTBeacon>();

    private  String DeviceName = null;
    private  String DeviceAddr = null;
    private  String DevicePassword = null;
    
	private boolean connect_flag = false;
	private boolean discover_flag = false;
	private boolean mRFComm_flag = false;
	private boolean mRFCommTX_flag = false;
	private boolean mRFCommRX_flag = false;

	private boolean read_name_flag = false;
	private boolean bind_flag = false;
	private boolean exit_activity = false;
	DataProcessThread mDataProcessThread = new DataProcessThread();
	
	private TouchScreen mTouchScreen;
	private JYDZ_Comm_Protocol mProtocol;
	private IrmtInterface mIrTouchInterface;
	
	TimerTask task = new TimerTask(){
		public void run(){
			if(discover_flag==false){
		        mBluetoothAdapter.stopLeScan(mLeScanCallback);
		        mIrTouchInterface.onError(ERROR_DEV_NOT_FOUND);
		        //Log.v(TAG,"dev not found");
			}
			discover_flag = false;
		}
	};    
	Timer timer = new Timer();  
	
	public BLCommService(Activity newAct,IrmtInterface newInterface ){
		inerActivity = newAct;
    	mIrTouchInterface = newInterface;
    	
    	mDataProcessThread.start();
        mTouchScreen = new TouchScreen();
        mProtocol = new JYDZ_Comm_Protocol(mTouchScreen);
        
        initBle();
	}
	
    public void userConnect( String newDevName, String DevAddr,String DevPassWord){
    	DeviceName = newDevName;
    	DeviceAddr = DevAddr;
    	DevicePassword = DevPassWord;

        if(mBluetoothAdapter.isDiscovering()){
        	mBluetoothAdapter.cancelDiscovery();
    	}
        //mBluetoothAdapter.stopLeScan(mLeScanCallback);
        mBluetoothAdapter.startLeScan(mLeScanCallback);
        timer.schedule(task, 10000);
        //Log.v(TAG, "TIMER START");
    }
    
    public void UserDisconn(){
    	disConectBle();
    }
	
	private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {

		@Override
		public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
			int i = 0;
			// 检查是否是搜索过的设备，并且更新
			for (i = 0; i < scan_devices.size(); i++) {
				if (0 == device.getAddress().compareTo(scan_devices.get(i).GetDevice().getAddress())) {
					scan_devices.get(i).ReflashInf(device, rssi, scanRecord); // 更新信息
					return;
				}
			}
			
			if(device.getName().equalsIgnoreCase(DeviceName)){
				//Log.v(TAG, "DEVICE GET!");
				discover_flag  = true;
				mBluetoothAdapter.stopLeScan(mLeScanCallback);
				conectBle(device);
			}

			// 增加新设备
			scan_devices.add(new MTBeacon(device, rssi, scanRecord));
		}
	};
	
	private BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {

		@Override
		public void onConnectionStateChange(BluetoothGatt gatt, int status,
				int newState) {
			super.onConnectionStateChange(gatt, status, newState);
			if (newState == BluetoothProfile.STATE_CONNECTED) { // 链接成功
				//Log.v(TAG, "CONNECTED");
				connect_flag = true;
				mIrTouchInterface.onBLconnected();
				mBluetoothGatt.discoverServices();
			} else if (newState == BluetoothProfile.STATE_DISCONNECTED) { // 断开链接
				//Log.v(TAG, "UNCONNECTED");
				connect_flag = false;
				mIrTouchInterface.onError(ERROR_CONN_LOST);
			}
		}

		@Override
		public void onServicesDiscovered(BluetoothGatt gatt, int status) {
			super.onServicesDiscovered(gatt, status);
			if (status == BluetoothGatt.GATT_SUCCESS) {
				//Log.v(TAG, "onServicesDiscovered");
				List<BluetoothGattService> services = gatt.getServices();
				//Log.v(TAG,"services.size-->"+services.size());
				String uuid;
				
				for (BluetoothGattService service : services) {
					uuid = service.getUuid().toString();
					
					if(!uuid.equalsIgnoreCase(UART_UUID)){
						continue;
					}
					mRFCommService = service;
					mRFComm_flag = true;
					// 添加一个一级目录
					Map<String, String> grounp = new HashMap<String, String>();
					grounp.put("name",SampleGattAttributes.lookup(uuid, "unknow"));
					grounp.put("Uuid", uuid);
					List<BluetoothGattCharacteristic> gattCharacteristics = service.getCharacteristics();
		
					for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {
						uuid = gattCharacteristic.getUuid().toString();
						if(uuid.equalsIgnoreCase(UART_UUID_TX)){
							mRFCommTXCharacteristic = gattCharacteristic;
							mRFCommTX_flag = true;
							//Log.v(TAG,"TX GET");
						}else if(uuid.equalsIgnoreCase(UART_UUID_RX)){
							int proper = 0; // 通道权限
							mRFCommRXCharacteristic = gattCharacteristic;
							proper = mRFCommRXCharacteristic.getProperties();
							//Log.v(TAG,"RX GET"+proper);
							if ((0 != (proper & BluetoothGattCharacteristic.PROPERTY_NOTIFY))
									|| (0 != (proper & BluetoothGattCharacteristic.PROPERTY_INDICATE))) { // 通知
								mBluetoothGatt.setCharacteristicNotification(
										mRFCommRXCharacteristic, true);
								BluetoothGattDescriptor descriptor = mRFCommRXCharacteristic
										.getDescriptor(UUID
												.fromString("00002902-0000-1000-8000-00805f9b34fb"));
								descriptor
										.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
								mBluetoothGatt.writeDescriptor(descriptor);
							}
							//Log.v(TAG,"RX GET");
							mRFCommRX_flag = true;
						}
					}
				}
			}
		}

		@Override
		public void onDescriptorRead(BluetoothGatt gatt,
				BluetoothGattDescriptor descriptor, int status) {
			super.onDescriptorRead(gatt, descriptor, status);
			read_name_flag = true;
		}

		@Override
		public void onCharacteristicRead(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			super.onCharacteristicRead(gatt, characteristic, status);
			
			if (status == BluetoothGatt.GATT_SUCCESS) {
			}
		}

		@Override
		public void onCharacteristicChanged(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic) {
			super.onCharacteristicChanged(gatt, characteristic);
            mHandler.obtainMessage(MSG_CharacteristicChanged, characteristic.getValue()).sendToTarget();//发送消息到CustomThread实例
		}
		
		@Override
		public void onCharacteristicWrite(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			super.onCharacteristicWrite(gatt, characteristic, status);
		}
	};


	// 初始化BLE
	public boolean initBle() {
		mBluetoothManager = (BluetoothManager) inerActivity.getSystemService(Context.BLUETOOTH_SERVICE);

		if (null == mBluetoothManager) {
			return false;
		}

		mBluetoothAdapter = mBluetoothManager.getAdapter();
		if (null == mBluetoothAdapter) {
			return false;
		}
		return true;
	}

	// 扫描
	public void scanBle(BluetoothAdapter.LeScanCallback callback) {
		mBluetoothAdapter.startLeScan(callback);
	}

	// 停止扫描
	public void stopscanBle(BluetoothAdapter.LeScanCallback callback) {
		mBluetoothAdapter.stopLeScan(callback);
	}

	// 发起连接
	public boolean conectBle(BluetoothDevice mBluetoothDevice) {
		disConectBle();
		
		BluetoothDevice device_tmp = mBluetoothAdapter.getRemoteDevice(mBluetoothDevice.getAddress());
		if(device_tmp == null){
			//Log.v(TAG,"device 不存在");
			return false;
		}
		
		mBluetoothGatt = device_tmp.connectGatt(inerActivity.getApplicationContext(), false,
				mGattCallback);
		return true;
	}

	// 关闭连接
	public void disConectBle(){
		if(mBluetoothGatt != null){
			mBluetoothGatt.disconnect();
			mBluetoothGatt.close();
			mBluetoothGatt = null;
			connect_flag = false;
			mRFCommTX_flag = false;
			mRFCommRX_flag = false;
			mRFComm_flag = false;			
		}
	}
	
	// 检查是否连接
	public boolean isConnected()
	{
		return connect_flag;
	}
	
	public void bleWrite(byte[] sendmsg){
		if(mRFCommTX_flag){
			mRFCommTXCharacteristic.setValue(sendmsg);
			mBluetoothGatt.writeCharacteristic(mRFCommTXCharacteristic);
		}else {
			//Log.v(TAG,"mRFCommTX_flag NOT SET");
		}
	}
	
	class DataProcessThread extends Thread {
		@Override
	    public void run() {
	       //建立消息循环的步骤
			Looper.prepare();//1、初始化Looper
	        mHandler = new Handler(){//2、绑定handler到CustomThread实例的Looper对象
	        public void handleMessage (Message msg) {//3、定义处理消息的方法
	        	switch(msg.what) {
	        		case MSG_CharacteristicChanged:	        			
	        			byte [] buffer = (byte [])msg.obj;
	                    int bytes = buffer.length;
	               //Log.v(TAG, "DATA");
	                    switch (mProtocol.handlerIncomeData(bytes,buffer)){
	                        case JYDZ_Comm_Protocol.COMM_STATUS_CHANGE_FORMAT:
	                        	byte[] CmdChangeFeatrue=mProtocol.ChangeDataFeatrue();
	                        	if(CmdChangeFeatrue!=null) {
	                        		bleWrite(CmdChangeFeatrue);
	                        	}
	                        	break;
	                        case JYDZ_Comm_Protocol.COMM_STATUS_DATA_GET_OK:
	                        	//Log.v(TAG, "dataget");
	                        	if(mTouchScreen.mTouchDownList.size()>0){
	                        		mIrTouchInterface.onTouchDown(mTouchScreen.mTouchDownList);
	                        		mTouchScreen.mTouchDownList.clear();
	                           		}
	                        	if(mTouchScreen.mTouchUpList.size()>0){
	                        		mIrTouchInterface.onTouchUp(mTouchScreen.mTouchUpList); 
	                        		mTouchScreen.mTouchUpList.clear();
	                        		}
	                        	if(mTouchScreen.mTouchMoveList.size()>0){
	                        		mIrTouchInterface.onTouchMove(mTouchScreen.mTouchMoveList); 
	                        		mTouchScreen.mTouchMoveList.clear();
	                        		}
	                        	break;
	                        case JYDZ_Comm_Protocol.COMM_STATUS_GESTURE_GET:
	                        	mIrTouchInterface.onGestureGet(mProtocol.dataBuffer[0]);
	                        	break;
	                        case JYDZ_Comm_Protocol.COMM_STATUS_SNAPSHOT_GET:
	                        	mIrTouchInterface.onSnapshot(mProtocol.dataBuffer[0]);
	                        	break;
	                        case JYDZ_Comm_Protocol.COMM_STATUS_IDENTI_GET:
	                        	mIrTouchInterface.onIdGet( mProtocol.dataBuffer[0]+mProtocol.dataBuffer[1]*256 +mProtocol.dataBuffer[2]*256*256 +mProtocol.dataBuffer[3]*256*256*256);
	                        	break;
	                        case JYDZ_Comm_Protocol.COMM_STATUS_SCREENFEATURE_GET:
	                        	mTouchScreen.SetIrTouchFeature(mProtocol.dataBuffer);
	                            //Log.v(TAG, "FEATRUE");
	                            break;
	                    }
	        		break;
	        		default :
	        		break;
	        	}
	        }
	    };
	    Looper.loop();//4、启动消息循环
	    }
	}
	
    private Handler mHandler;
    
    private static final String TAG = "BLService";
	public final static String ACTION_DATA_CHANGE = "com.example.bluetooth.le.ACTION_DATA_CHANGE";
	public final static String ACTION_RSSI_READ = "com.example.bluetooth.le.ACTION_RSSI_READ";
	public final static String ACTION_STATE_CONNECTED = "com.example.bluetooth.le.ACTION_STATE_CONNECTED";
	public final static String ACTION_STATE_DISCONNECTED = "com.example.bluetooth.le.ACTION_STATE_DISCONNECTED";
	public final static String ACTION_WRITE_OVER = "com.example.bluetooth.le.ACTION_WRITE_OVER";
	public final static String ACTION_READ_OVER = "com.example.bluetooth.le.ACTION_READ_OVER";
	public final static String ACTION_READ_Descriptor_OVER = "com.example.bluetooth.le.ACTION_READ_Descriptor_OVER";
	public final static String ACTION_WRITE_Descriptor_OVER = "com.example.bluetooth.le.ACTION_WRITE_Descriptor_OVER";
	public final static String ACTION_ServicesDiscovered_OVER = "com.example.bluetooth.le.ACTION_ServicesDiscovered_OVER";

    public static final int ERROR_NONE = 0;
    public static final int ERROR_CONN_FAILED = 1;
    public static final int ERROR_CONN_LOST = 2;
    public static final int ERROR_DEV_NOT_FOUND = 3;
	protected static final int MSG_CharacteristicChanged = 1;
	
    public static final String UART_UUID = "0000f1f0-0000-1000-8000-00805f9b34fb";
    public static final String UART_UUID_TX = "0000f1f1-0000-1000-8000-00805f9b34fb";
    public static final String UART_UUID_RX = "0000f1f2-0000-1000-8000-00805f9b34fb";
}
