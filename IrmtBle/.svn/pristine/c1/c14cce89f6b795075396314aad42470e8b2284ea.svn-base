package com.example.irmtble;

import java.util.ArrayList;
import java.util.List;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattDescriptor;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.util.Log;

public class BLCommService {
	
    private static final String TAG = "BLService";
	public final static String ACTION_DATA_CHANGE = "com.example.bluetooth.le.ACTION_DATA_CHANGE";
	public final static String ACTION_RSSI_READ = "com.example.bluetooth.le.ACTION_RSSI_READ";
	public final static String ACTION_STATE_CONNECTED = "com.example.bluetooth.le.ACTION_STATE_CONNECTED";
	public final static String ACTION_STATE_DISCONNECTED = "com.example.bluetooth.le.ACTION_STATE_DISCONNECTED";
	public final static String ACTION_WRITE_OVER = "com.example.bluetooth.le.ACTION_WRITE_OVER";
	public final static String ACTION_READ_OVER = "com.example.bluetooth.le.ACTION_READ_OVER";
	public final static String ACTION_READ_Descriptor_OVER = "com.example.bluetooth.le.ACTION_READ_Descriptor_OVER";
	public final static String ACTION_WRITE_Descriptor_OVER = "com.example.bluetooth.le.ACTION_WRITE_Descriptor_OVER";
	public final static String ACTION_ServicesDiscovered_OVER = "com.example.bluetooth.le.ACTION_ServicesDiscovered_OVER";

	public  BluetoothManager mBluetoothManager;
	public  BluetoothAdapter mBluetoothAdapter;
	public  BluetoothGatt mBluetoothGatt;
    private  Activity inerActivity = null;
	private List<MTBeacon> scan_devices = new ArrayList<MTBeacon>();

    private  String DeviceName = null;
    private  String DeviceAddr = null;
    private  String DevicePassword = null;
	private boolean connect_flag = false;
	private TouchScreen mTouchScreen;
	private JYDZ_Comm_Protocol mProtocol;
	private IrmtInterface mIrTouchInterface;

	public BLCommService(Activity newAct,IrmtInterface newInterface ){
		inerActivity = newAct;
    	mIrTouchInterface = newInterface;
    	
        mTouchScreen = new TouchScreen();
        mProtocol = new JYDZ_Comm_Protocol(mTouchScreen);
        
        initBle();
	}
	
    public void userConnect( String newDevName, String DevAddr,String DevPassWord){
    	DeviceName = newDevName;
    	DeviceAddr = DevAddr;
    	DevicePassword = DevPassWord;

        if(mBluetoothAdapter.isDiscovering()){
        	mBluetoothAdapter.cancelDiscovery();
        	mBluetoothAdapter.stopLeScan(mLeScanCallback);
    	}
        mBluetoothAdapter.startLeScan(mLeScanCallback);
    }
	
	private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {

		@Override
		public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
			int i = 0;
			// 检查是否是搜索过的设备，并且更新
			for (i = 0; i < scan_devices.size(); i++) {
				if (0 == device.getAddress().compareTo(scan_devices.get(i).GetDevice().getAddress())) {
					scan_devices.get(i).ReflashInf(device, rssi, scanRecord); // 更新信息
					return;
				}
			}
			
			if(device.getName().equalsIgnoreCase(DeviceName)){
				Log.v(TAG, "DEVICE GET!");
				mBluetoothAdapter.stopLeScan(mLeScanCallback);
				conectBle(device);
			}

			// 增加新设备
			scan_devices.add(new MTBeacon(device, rssi, scanRecord));
		}
	};
	
	private BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {

		@Override
		public void onConnectionStateChange(BluetoothGatt gatt, int status,
				int newState) {
			super.onConnectionStateChange(gatt, status, newState);
			if (newState == BluetoothProfile.STATE_CONNECTED) { // 链接成功
				Log.v(TAG, "CONNECTED");
				connect_flag = true;
				mBluetoothGatt.discoverServices();
				broadcastUpdate(ACTION_STATE_CONNECTED);

			} else if (newState == BluetoothProfile.STATE_DISCONNECTED) { // 断开链接
				Log.v(TAG, "UNCONNECTED");
				connect_flag = false;
				broadcastUpdate(ACTION_STATE_DISCONNECTED);
			}
		}

		@Override
		public void onServicesDiscovered(BluetoothGatt gatt, int status) {
			super.onServicesDiscovered(gatt, status);
			if (status == BluetoothGatt.GATT_SUCCESS) {
				Log.v(TAG, "onServicesDiscovered");
				List<BluetoothGattService> services = gatt.getServices();
				Log.v(TAG,"services.size-->"+services.size());
				//broadcastUpdate(ACTION_ServicesDiscovered_OVER, status);
			}
		}

		@Override
		public void onDescriptorRead(BluetoothGatt gatt,
				BluetoothGattDescriptor descriptor, int status) {
			super.onDescriptorRead(gatt, descriptor, status);

			broadcastUpdate(ACTION_READ_Descriptor_OVER, status);
		}

		@Override
		public void onCharacteristicRead(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			super.onCharacteristicRead(gatt, characteristic, status);
			
			if (status == BluetoothGatt.GATT_SUCCESS) {
				broadcastUpdate(ACTION_READ_OVER, characteristic.getValue());
			}
		}

		@Override
		public void onCharacteristicChanged(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic) {
			super.onCharacteristicChanged(gatt, characteristic);
			broadcastUpdate(ACTION_DATA_CHANGE, characteristic.getValue());
		}
		

		@Override
		public void onCharacteristicWrite(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			super.onCharacteristicWrite(gatt, characteristic, status);
			broadcastUpdate(ACTION_WRITE_OVER, status);
		}
	};


	// 初始化BLE
	public boolean initBle() {
		mBluetoothManager = (BluetoothManager) inerActivity.getSystemService(Context.BLUETOOTH_SERVICE);

		if (null == mBluetoothManager) {
			return false;
		}

		mBluetoothAdapter = mBluetoothManager.getAdapter();
		if (null == mBluetoothAdapter) {
			return false;
		}
		return true;
	}

	// 扫描
	public void scanBle(BluetoothAdapter.LeScanCallback callback) {
		mBluetoothAdapter.startLeScan(callback);
	}

	// 停止扫描
	public void stopscanBle(BluetoothAdapter.LeScanCallback callback) {
		mBluetoothAdapter.stopLeScan(callback);
	}

	// 发起连接
	public boolean conectBle(BluetoothDevice mBluetoothDevice) {
		disConectBle();
		
		BluetoothDevice device_tmp = mBluetoothAdapter.getRemoteDevice(mBluetoothDevice.getAddress());
		if(device_tmp == null){
			Log.v(TAG,"device 不存在");
			return false;
		}
		
		mBluetoothGatt = device_tmp.connectGatt(inerActivity.getApplicationContext(), false,
				mGattCallback);
		return true;
	}

	// 关闭连接
	public void disConectBle(){
		if(mBluetoothGatt != null){
			mBluetoothGatt.disconnect();
			mBluetoothGatt.close();
			mBluetoothGatt = null;
			connect_flag = false;
		}
	}
	
	// 检查是否连接
	public boolean isConnected()
	{
		return connect_flag;
	}
	
	// 发送广播消息
	private void broadcastUpdate(final String action) {
	}

	// 发送广播消息
	private void broadcastUpdate(final String action, int value) {
	}

	// 发送广播消息
	private void broadcastUpdate(final String action, byte value[]) {
	}
}
